from config import APP_CONFIG, FILE_CONFIG, AUDIO_CONFIG
from voiceRecord import configure_microphone, record_single_audio, continuous_recording_mode, store_voice_record
from Thai_textProcessing import fix_thai_word_count, validate_voice_records
from KMean import ml_text_classification, ML_LIBS_AVAILABLE
from dataVisualize import configure_matplotlib, create_word_count_distribution_chart, create_ml_classification_charts, create_comprehensive_dashboard
from dataManagement import load_voice_records, save_voice_records, create_directories, cleanup_voice_records, export_to_csv, search_voice_records
from analysisReport import generate_basic_summary, generate_ml_analysis_report, save_analysis_report, create_project_summary

class ThaiVoiceRecorderML:
    
    def __init__(self):
        self.user_login = "67991023"
        self.current_datetime = "2025-09-02 06:47:37"
        self.version = "ml-focused-1.0"
        self.voice_records = []
        self.recognizer = None
        self._initialize_application()
    
    def _initialize_application(self):
        """Initialize the application"""
        print(f"üöÄ Initializing Thai Voice Recorder with ML Analytics...")
        print(f"üë§ User: {self.user_login}")
        print(f"üìÖ Current Time: {self.current_datetime}")
        print(f"üîñ Version: {self.version}")
        
        create_directories()
        configure_matplotlib()
        self.recognizer = configure_microphone()
        self.voice_records = load_voice_records()
        self.voice_records = cleanup_voice_records(self.voice_records)
        self._check_capabilities()
        print("‚úÖ Application initialized successfully!")
    
    def _check_capabilities(self):
        """Check available capabilities"""
        print(f"\nüîç System capabilities:")
        print(f"   ‚Ä¢ Machine Learning: {'‚úÖ' if ML_LIBS_AVAILABLE else '‚ùå'}")
        print(f"   ‚Ä¢ Voice Records: {len(self.voice_records)} loaded")
        
        if not ML_LIBS_AVAILABLE:
            print("‚ö†Ô∏è Install scikit-learn for ML features: pip install scikit-learn")
    
    def record_voice_continuously(self):
        """Start continuous voice recording mode"""
        if not self.recognizer:
            print("‚ùå Microphone not configured")
            return
        
        print("\nüîÑ Starting continuous voice recording...")
        recorded_texts = continuous_recording_mode(self.recognizer)
        
        new_records_count = 0
        for text in recorded_texts:
            if text.strip():
                record = store_voice_record(text, len(self.voice_records) + new_records_count + 1)
                record['word_count'] = fix_thai_word_count(text)
                self.voice_records.append(record)
                new_records_count += 1
        
        if new_records_count > 0:
            save_voice_records(self.voice_records)
            print(f"üíæ Saved {new_records_count} new recordings")
        
        if new_records_count >= 2:
            choice = input("\nüî¨ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏´‡∏°? (y/n): ")
            if choice.lower() in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                self.run_complete_analysis()
    
    def view_all_recordings(self):
        """Display all voice recordings"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏î‡πÜ")
            return
        
        print(f"""
üìã ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
{'=' * 50}
üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {self.user_login}
üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.current_datetime}
üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°: {len(self.voice_records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
{'=' * 50}""")
        
        for i, record in enumerate(self.voice_records, 1):
            word_count = record.get('word_count', 0)
            char_count = record.get('character_count', len(record.get('text', '')))
            timestamp = record.get('timestamp', 'N/A')
            
            print(f"""
{i}. ID: {record.get('id', i)} | ‡∏Ñ‡∏≥: {word_count} | ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: {char_count}
   üìÖ {timestamp[:19] if timestamp != 'N/A' else 'N/A'}
   üìù {record['text'][:100]}{'...' if len(record['text']) > 100 else ''}""")
        
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ: {len(self.voice_records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    def create_word_count_distribution(self):
        """Generate word count distribution chart"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            return
        
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥...")
        chart_path = create_word_count_distribution_chart(self.voice_records)
        if chart_path:
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {chart_path}")
    
    def run_ml_classification(self):
        """Run machine learning classification"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML")
            return None
        
        if not ML_LIBS_AVAILABLE:
            print("‚ùå ML libraries ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return None
        
        print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Machine Learning...")
        results_df = ml_text_classification(self.voice_records)
        
        if results_df is not None and not results_df.empty:
            print("‚úÖ ML Classification ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            return results_df
        else:
            print("‚ùå ML Classification ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            return None
    
    def run_complete_analysis(self):
        """Run comprehensive analysis with ML features"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
        
        print("\nüî¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô...")
        print("=" * 60)
        
        results_data = {}
        
        # 1. Word Count Distribution
        print("üìä 1. Creating Word Count Distribution...")
        word_chart = create_word_count_distribution_chart(self.voice_records)
        if word_chart:
            results_data['word_distribution'] = word_chart
        
        # 2. Machine Learning Classification
        print("ü§ñ 2. Running ML Classification...")
        results_df = self.run_ml_classification()
        if results_df is not None:
            results_data['ml_results'] = results_df
        
        # 3. Comprehensive Dashboard
        if results_df is not None:
            print("üìä 3. Creating Comprehensive Dashboard...")
            dashboard_path = create_comprehensive_dashboard(results_df)
            if dashboard_path:
                results_data['dashboard'] = dashboard_path
        
        # 4. Generate Reports
        print("üìã 4. Generating Analysis Reports...")
        
        # Basic summary
        basic_summary = generate_basic_summary(self.voice_records)
        basic_report_path = save_analysis_report(basic_summary, "basic")
        
        # ML report if available
        if results_df is not None:
            ml_report = generate_ml_analysis_report(results_df)
            ml_report_path = save_analysis_report(ml_report, "ml_analysis")
            results_data['ml_report'] = ml_report_path
        
        # Project summary
        project_summary = create_project_summary(self.voice_records, results_df)
        project_report_path = save_analysis_report(project_summary, "project_summary")
        results_data['project_summary'] = project_report_path
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
        print(f"üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô: {FILE_CONFIG['output_dir']}")
        
        # Summary of results
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        for key, value in results_data.items():
            if value:
                print(f"   ‚úÖ {key}: {value if isinstance(value, str) else 'Completed'}")
        
        return results_data
    
    def generate_basic_summary_report(self):
        """Generate and display basic summary"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
            return
        
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
        summary = generate_basic_summary(self.voice_records)
        
        print("\n" + "="*60)
        print(summary)
        print("="*60)
        
        # Save report
        report_path = save_analysis_report(summary, "basic_summary")
        if report_path:
            print(f"üìÅ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {report_path}")
    
    def search_recordings(self):
        """Search recordings interface"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            return
        
        keyword = input("üîç ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô: ").strip()
        if not keyword:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô")
            return
        
        results = search_voice_records(self.voice_records, keyword)
        
        if results:
            print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{keyword}': {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            print("=" * 50)
            
            for i, record in enumerate(results, 1):
                print(f"\n{i}. ID: {record.get('id', 'N/A')} | ‡∏Ñ‡∏≥: {record.get('word_count', 0)}")
                print(f"     {record['text'][:70]}...")
                print()
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ '{keyword}'")
    
    def export_data(self):
        """Export data to CSV"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Export")
            return
        
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV...")
        csv_path = export_to_csv(self.voice_records)
        
        if csv_path:
            print(f"‚úÖ Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {csv_path}")
        else:
            print("‚ùå Export ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    def show_main_menu(self):
        """Display main application menu"""
        print(f"""
{'='*60}
üéôÔ∏è THAI VOICE RECORDER WITH ML ANALYTICS
{'='*60}
üë§ User: {self.user_login} | üìä Records: {len(self.voice_records)}
üìÖ {self.current_datetime} | üîñ {self.version}

üìã MENU OPTIONS:
1Ô∏è‚É£  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (Continuous Recording)
2Ô∏è‚É£  ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (View All Recordings)
3Ô∏è‚É£  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏≥ (Word Count Distribution)
4Ô∏è‚É£  ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ML (ML Classification)
5Ô∏è‚É£  ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (Complete Analysis)
6Ô∏è‚É£  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ (Generate Summary Report)
7Ô∏è‚É£  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (Search Recordings)
8Ô∏è‚É£  Export ‡πÄ‡∏õ‡πá‡∏ô CSV (Export to CSV)
9Ô∏è‚É£  ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Exit)
{'='*60}""")
    
    def run_interactive_mode(self):
        """Run main interactive interface"""
        print("üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏è‡∏¥‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå")
        
        while True:
            try:
                self.show_main_menu()
                choice = input("\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-9): ").strip()
                
                menu_actions = {
                    '1': self.record_voice_continuously,
                    '2': self.view_all_recordings,
                    '3': self.create_word_count_distribution,
                    '4': self.run_ml_classification,
                    '5': self.run_complete_analysis,
                    '6': self.generate_basic_summary_report,
                    '7': self.search_recordings,
                    '8': self.export_data,
                    '9': lambda: self._exit_application()
                }
                
                if choice in menu_actions:
                    if choice == '9':
                        break
                    menu_actions[choice]()
                else:
                    print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-9")
                
                input("\n‚è∏Ô∏è  ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
                
            except KeyboardInterrupt:
                print("\n\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                break
            except Exception as e:
                print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    def _exit_application(self):
        """Exit application with summary"""
        print(f"""
üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(self.voice_records)}
üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {self.user_login}
üìÖ Current Date and Time (UTC): 2025-09-02 06:47:37
üîñ Version: {self.version}

‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Thai Voice Recorder with ML Analytics!
""")

def main():
    """Main application entry point"""
    try:
        app = ThaiVoiceRecorderML()
        app.run_interactive_mode()
    except Exception as e:
        print(f"‚ùå Critical error: {e}")

if __name__ == "__main__":
    main()