from config import APP_CONFIG, FILE_CONFIG, AUDIO_CONFIG
from voiceRecord import configure_microphone, record_single_audio, continuous_recording_mode, store_voice_record
from Thai_textProcessing import fix_thai_word_count
from KMean import ml_text_classification, ML_LIBS_AVAILABLE
from dataVisualize import configure_matplotlib, create_word_count_distribution_chart, create_ml_classification_charts, create_comprehensive_dashboard
from dataManagement import load_voice_records, save_voice_records, create_directories, cleanup_voice_records, export_to_csv, search_voice_records
from analysisReport import generate_basic_summary, generate_ml_analysis_report, save_analysis_report, create_project_summary

class ThaiVoiceRecorderML:
    
    def __init__(self):
        # Application info (UPDATED TIMESTAMP)
        self.user_login = "67991023"
        self.current_datetime = "2025-08-28 07:06:16"
        self.version = "ml-focused-1.0"
        
        # Initialize components
        self.voice_records = []
        self.recognizer = None
        
        # Setup
        self._initialize_application()
    
    def _initialize_application(self):
        """Initialize the application"""
        print(f"üöÄ Initializing Thai Voice Recorder with ML Analytics...")
        print(f"üë§ User: {self.user_login}")
        print(f"üìÖ Current Time: {self.current_datetime}")
        print(f"üîñ Version: {self.version}")
        
        # Create directories
        create_directories()
        
        # Configure visualization
        configure_matplotlib()
        
        # Configure microphone
        self.recognizer = configure_microphone()
        
        # Load existing data
        self.voice_records = load_voice_records()
        self.voice_records = cleanup_voice_records(self.voice_records)
        
        # Check capabilities
        self._check_capabilities()
        
        print("‚úÖ Application initialized successfully!")
    
    def _check_capabilities(self):
        """Check available capabilities"""
        print("\nüîç Checking system capabilities:")
        print(f"   ‚Ä¢ Machine Learning: {'‚úÖ' if ML_LIBS_AVAILABLE else '‚ùå'}")
        print(f"   ‚Ä¢ Voice Records: {len(self.voice_records)} loaded")
        
        if not ML_LIBS_AVAILABLE:
            print("‚ö†Ô∏è Install scikit-learn for ML features: pip install scikit-learn")
    
    def record_voice_continuously(self):
        """Start continuous voice recording mode"""
        if not self.recognizer:
            print("‚ùå Microphone not configured")
            return
        
        print("\nüîÑ Starting continuous voice recording...")
        recorded_texts = continuous_recording_mode(self.recognizer)
        
        # Store all recorded texts
        new_records_count = 0
        for text in recorded_texts:
            if text.strip():
                record = store_voice_record(text, len(self.voice_records) + new_records_count + 1)
                record['word_count'] = fix_thai_word_count(text)
                self.voice_records.append(record)
                new_records_count += 1
        
        # Save data
        if new_records_count > 0:
            save_voice_records(self.voice_records)
            print(f"üíæ Saved {new_records_count} new recordings")
        
        # Offer immediate analysis
        if new_records_count >= 2:
            choice = input("\nüî¨ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏´‡∏°? (y/n): ")
            if choice.lower() in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                self.run_complete_analysis()
    
    def view_all_recordings(self):
        """Display all voice recordings"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏î‡πÜ")
            return
        
        print(f"""
üìã ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
{'=' * 50}
üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {self.user_login}
üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.current_datetime}
üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°: {len(self.voice_records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
{'=' * 50}
""")
        
        # Show last 10 records with enhanced info
        display_records = self.voice_records[-10:]
        
        for i, record in enumerate(display_records, 1):
            print(f"""
üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {record['id']} (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î #{i})
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {record.get('date', 'N/A')} ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {record.get('time', 'N/A')}
üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥: {record.get('word_count', 0)} ‡∏Ñ‡∏≥ | ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: {record.get('character_count', 0)} ‡∏ï‡∏±‡∏ß
üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {record['text'][:80]}{'...' if len(record['text']) > 80 else ''}
{'-' * 60}""")
        
        # Quick statistics
        if len(self.voice_records) >= 1:
            word_counts = [r.get('word_count', 0) for r in self.voice_records]
            avg_words = sum(word_counts) / len(word_counts)
            
            print(f"""
üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ:
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {avg_words:.1f}
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {max(word_counts)} ‡∏Ñ‡∏≥
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {min(word_counts)} ‡∏Ñ‡∏≥
‚Ä¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ML
""")
    
    def create_word_count_distribution(self):
        """Generate word count distribution chart"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            return
        
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü Word Count Distribution...")
        chart_path = create_word_count_distribution_chart(self.voice_records)
        
        if chart_path:
            print(f"‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: {chart_path}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ")
    
    def run_ml_classification(self):
        """Run machine learning classification"""
        if not ML_LIBS_AVAILABLE:
            print("‚ùå Machine Learning libraries ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install scikit-learn")
            return
        
        if len(self.voice_records) < 2:
            print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML")
            return
        
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ Machine Learning Classification...")
        results_df = ml_text_classification(self.voice_records)
        
        if not results_df.empty:
            # Create ML visualization
            chart_path = create_ml_classification_charts(results_df)
            
            if chart_path:
                print(f"‚úÖ ML analysis charts saved: {chart_path}")
            
            return results_df
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ ML classification ‡πÑ‡∏î‡πâ")
            return None
    
    def run_complete_analysis(self):
        """Run comprehensive analysis with ML features"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
        
        print("\nüî¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô...")
        print("=" * 60)
        
        results_data = {}
        
        # 1. Word Count Distribution
        print("üìä 1. Creating Word Count Distribution...")
        word_chart = create_word_count_distribution_chart(self.voice_records)
        if word_chart:
            results_data['word_distribution'] = word_chart
        
        # 2. Machine Learning Classification
        print("ü§ñ 2. Running ML Classification...")
        results_df = self.run_ml_classification()
        if results_df is not None:
            results_data['ml_results'] = results_df
        
        # 3. Comprehensive Dashboard
        if results_df is not None:
            print("üìä 3. Creating Comprehensive Dashboard...")
            dashboard_path = create_comprehensive_dashboard(results_df)
            if dashboard_path:
                results_data['dashboard'] = dashboard_path
        
        # 4. Generate Reports
        print("üìã 4. Generating Analysis Reports...")
        
        # Basic summary
        basic_summary = generate_basic_summary(self.voice_records)
        basic_report_path = save_analysis_report(basic_summary, "basic")
        
        # ML report if available
        if results_df is not None:
            ml_report = generate_ml_analysis_report(results_df)
            ml_report_path = save_analysis_report(ml_report, "ml_analysis")
            results_data['ml_report'] = ml_report_path
        
        # Project summary
        project_summary = create_project_summary(self.voice_records, results_df)
        project_report_path = save_analysis_report(project_summary, "project_summary")
        results_data['project_summary'] = project_report_path
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
        print(f"üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô: {FILE_CONFIG['output_dir']}")
        
        # Summary of results
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        for key, value in results_data.items():
            if value:
                print(f"   ‚úÖ {key}: {value if isinstance(value, str) else 'Completed'}")
        
        return results_data
    
    def generate_basic_summary_report(self):
        """Generate and display basic summary"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ")
            return
        
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        summary = generate_basic_summary(self.voice_records)
        
        # Display summary
        print(summary)
        
        # Save summary
        report_path = save_analysis_report(summary, "basic_summary")
        if report_path:
            print(f"\nüìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {report_path}")
    
    def search_recordings(self):
        """Search recordings interface"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            return
        
        keyword = input("üîç ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ").strip()
        if not keyword:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            return
        
        results = search_voice_records(self.voice_records, keyword)
        
        if results:
            print(f"\nüéØ ‡∏û‡∏ö {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ '{keyword}':")
            print("-" * 50)
            
            for i, record in enumerate(results[-5:], 1):  # Show last 5 results
                print(f"{i:2d}. [{record.get('date', 'N/A')} {record.get('time', 'N/A')}] ({record.get('word_count', 0)} ‡∏Ñ‡∏≥)")
                print(f"     {record['text'][:70]}...")
                print()
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ '{keyword}'")
    
    def export_data(self):
        """Export data to CSV"""
        if not self.voice_records:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export")
            return
        
        export_path = export_to_csv(self.voice_records)
        if export_path:
            print(f"üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• export ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: {export_path}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
    
    def show_main_menu(self):
        """Display main application menu"""
        print(f"\n{'üéôÔ∏è Thai Voice Recorder with ML Analytics' :^70}")
        print(f"{'üë§ User: ' + self.user_login + ' | üìÖ ' + self.current_datetime :^70}")
        print(f"{'üî¨ Features: ML Classification + Word Distribution + Visualization' :^70}")
        print("=" * 70)
        
        print("üìã ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å:")
        print("1. üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á")
        print("2. üëÅÔ∏è  ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("3. üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü Word Count Distribution")
        print("4. ü§ñ ‡∏ó‡∏≥ Machine Learning Classification")
        print("5. üî¨ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (ML + Visualization)")
        print("6. üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        print("7. üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        print("8. üì§ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (CSV)")
        print("0. üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    
    def run_interactive_mode(self):
        """Run main interactive interface"""
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Thai Voice Recorder with ML Analytics!")
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {len(self.voice_records)} ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        print(f"üéØ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Machine Learning")
        
        while True:
            self.show_main_menu()
            choice = input(f"\nüî¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (0-8): ").strip()
            
            try:
                if choice == "1":
                    self.record_voice_continuously()
                    
                elif choice == "2":
                    self.view_all_recordings()
                    
                elif choice == "3":
                    self.create_word_count_distribution()
                    
                elif choice == "4":
                    self.run_ml_classification()
                    
                elif choice == "5":
                    self.run_complete_analysis()
                    
                elif choice == "6":
                    self.generate_basic_summary_report()
                    
                elif choice == "7":
                    self.search_recordings()
                    
                elif choice == "8":
                    self.export_data()
                    
                elif choice == "0":
                    print(f"\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Thai Voice Recorder with ML Analytics!")
                    print(f"üìä ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {len(self.voice_records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    print(f"üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {FILE_CONFIG['data_file']}")
                    print(f"üìÅ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {FILE_CONFIG['output_dir']}")
                    print(f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {self.user_login}")
                    print(f"üïí ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {self.current_datetime}")
                    print(f"üîñ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: {self.version}")
                    print(f"‚ú® ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                    break
                    
                else:
                    print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0-8)")
                
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                break
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            
            input("\nüì± ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")

def main():
    """Main application entry point"""
    try:
        print("üöÄ Starting Thai Voice Recorder with ML Analytics...")
        print(f"üë§ Current User Login: 67991023")
        print(f"üìÖ Current Date and Time (UTC): 2025-08-28 07:06:16")
        print(f"üî¨ Features: Voice Recording + ML Classification + Word Distribution + Visualization")
        print("=" * 80)
        
        # Create and run application
        app = ThaiVoiceRecorderML()
        app.run_interactive_mode()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
        
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        print("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies")
        
    finally:
        print("üèÅ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î - Thai Voice Analytics Project")

if __name__ == "__main__":
    main()